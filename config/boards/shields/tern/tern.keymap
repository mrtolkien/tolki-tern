/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define WIP1_L 4
#define WIP2_L 5

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <50>;
            bindings = <&kp>, <&kp>;
        };

        // UNUSED ATM
        pe_co: period_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COMMA";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // TODO Unused atm, using dedicated key
        // sp_bs: sp_bs {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "SPACE_BACKSPACE";
        //     #binding-cells = <0>;
        //     bindings = <&kp SPACE>, <&kp BSPC>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };
    
        // lt_sp: layer_tap_space_backspace {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LAYER_TAP_SPACE_BACKSPACE";
        //     #binding-cells = <2>;
        //     bindings = <&mo>, <&kp SPACE>;
        //     tapping-term-ms = <120>;
        //     quick-tap-ms = <200>;
        // };

        bs_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    
        lt_bs: layer_tap_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_BACKSPACE_DELETE";
            #binding-cells = <2>;
            bindings = <&mo>, <&bs_del>;
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
        };

        // TODO Unused atm, not playing well w/ tap dance
        // qu_q: tap_dance_0 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAP_DANCE_0";
        //     #binding-cells = <0>;
        //     bindings = <&qu>, <&kp Q>;
        // };
    };

    macros {
        e_acute: e_acute{
            label = "é";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RA(E)>
                , <&macro_tap &kp E>
                ;
        };

        e_grave: e_grave{
            label = "è";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RA(GRAVE)>
                , <&macro_tap &kp E>
                ;
        };

        a_grave: a_grave{
            label = "à";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RA(GRAVE)>
                , <&macro_tap &kp A>
                ;
        };

        u_grave: u_grave{
            label = "ù";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RA(GRAVE)>
                , <&macro_tap &kp U>
                ;
        };

        i_circ: i_circ{
            label = "î";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RA(I)>
                , <&macro_tap &kp I>
                ;
        };
        
        // qu: qu{
        //     label = "qu";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&macro_tap &kp Q>
        //         , <&macro_tap &kp U>
        //         ;
        // };
    };

    combos {
        compatible = "zmk,combos";

        // This need to be the 1st entry for the yq command in README to work
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <18 25>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        combo_top_left_left {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp J>;
            layers = <0>;
        };


        combo_top_left_right {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp SEMICOLON>;
            layers = <0>;
        };

        combo_top_right_left {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp MINUS>;
            layers = <0>;
        };

        combo_top_right_right {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        combo_bottom_right_left {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RET>;
            layers = <0>;
        };

        // Braces combos
        combo_col_0 {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <0>;
        };

        combo_col_2 {
            timeout-ms = <50>;
            key-positions = <1 10>;
            bindings = <&kp LEFT_PARENTHESIS>;
            layers = <0>;
        };

        combo_col_3 {
            timeout-ms = <50>;
            key-positions = <2 11>;
            bindings = <&kp LEFT_BRACE>;
            layers = <0>;
        };

        combo_col_4 {
            timeout-ms = <50>;
            key-positions = <5 14>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0>;
        };

        combo_col_5 {
            timeout-ms = <50>;
            key-positions = <6 15>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            layers = <0>;
        };


        combo_col_6 {
            timeout-ms = <50>;
            key-positions = <7 16>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <0>;
        };

        // Extra exotic combos
        // TODO Review, maybe alt-tab
        // combo_thumbs {
        //     timeout-ms = <50>;
        //     key-positions = <27 28>;
        //     bindings = <&kp TAB>;
        //     layers = <0>;
        // };

        // TODO Didn't feel right
        // combo_left_thumb {
        //     timeout-ms = <50>;
        //     key-positions = <26 27>;
        //     bindings = <&e_acute>;
        //     layers = <0>;
        // };

        combo_right_thumb {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp TAB>;
            layers = <0>;
        };

        // Vim-inspired (old J-K)
        combo_exit {
            timeout-ms = <50>;
            key-positions = <21 20>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        // combo_left_diagonal_up {
        //     timeout-ms = <50>;
        //     key-positions = <2 10>;
        //     bindings = <&e_acute>;
        //     layers = <0>;
        // };

        // combo_left_diagonal_down {
        //     timeout-ms = <50>;
        //     key-positions = <10 21>;
        //     bindings = <&e_grave>;
        //     layers = <0>;
        // };

        // combo_left_pinky {
        //     timeout-ms = <50>;
        //     key-positions = <0 8>;
        //     bindings = <&a_grave>;
        //     layers = <0>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                             &kp Y      &kp O       &kp F           &kp B        &kp K            &kp Q          &kp L       &kp V
                &lt WIP1_L U &hm LALT I &hm LCTRL A &hm LGUI C      &kp G        &kp M            &hm RGUI T     &hm RCTRL N &hm LALT S &lt WIP2_L R
                &kp W        &kp COMMA  &kp PERIOD  &kp P                                         &kp D          &kp H       &kp X      &kp SINGLE_QUOTE

                                                    &sk LSHIFT      &lt NAV_L E  &lt SYM_L SPACE  &lt_bs NUM_L 0
            >;
        };
        
        nav_layer {
            label = "Navigation";
            bindings = <
                           &kp GRAVE  &kp UP      &kp PAGE_UP     &trans       &kp C_VOL_UP    &kp C_MUTE     &trans      &trans
                &kp HOME   &kp LEFT   &kp DOWN    &kp RIGHT       &kp END      &kp C_VOL_DN    &trans         &trans      &trans     &kp RIGHT_SHIFT
                &kp K_APP  &trans     &trans      &kp PAGE_DOWN                                &kp C_STOP     &kp C_PREV  &kp C_NEXT &kp C_PP

                                                  &trans          &trans       &trans          &trans
            >;
        };

        math_layer {
            label = "Math";
            bindings = <
                           &trans         &trans      &trans          &trans        &kp KP_DIVIDE   &kp N7     &kp N8      &kp N9
                &trans     &trans         &trans      &trans          &trans        &kp KP_MULTIPLY &kp N4     &kp N5      &kp N6     &kp EQUAL
                &trans     &trans         &trans      &trans                                        &kp N1     &kp N2      &kp N3     &kp PLUS

                                                      &trans          &kp 0         &trans          &trans
            >;
        };

        sym_layer {
            label = "Symbols";
            bindings = <
                           &trans         &trans      &trans          &trans        &kp KP_DIVIDE   &kp BSLH   &kp PIPE    &kp CARET
                &trans     &trans         &trans      &trans          &trans        &kp KP_MULTIPLY &kp QMARK  &kp EXCL    &kp AMPS   &kp EQUAL
                &trans     &trans         &trans      &trans                                        &kp DOLLAR &kp HASH    &kp AT     &kp PLUS

                                                      &trans          &trans        &trans          &trans
            >;
        };

        wip1_layer {
            label = "WiP";
            bindings = <
                           &trans     &trans      &trans          &trans       &trans          &trans         &trans      &trans
                &trans     &trans     &trans      &trans          &trans       &trans          &trans         &trans      &trans     &trans
                &trans     &trans     &trans      &trans                                       &trans         &trans      &trans     &trans

                                                  &trans          &trans       &trans          &trans
            >;
        };

        wip2_layer {
            label = "French";
            bindings = <
                           &trans     &trans      &trans          &trans       &trans          &trans         &trans      &trans
                &u_grave   &i_circ    &a_grave    &kp RA(C)       &trans       &trans          &trans         &trans      &trans     &trans
                &trans     &trans     &trans      &trans                                       &trans         &trans      &trans     &trans

                                                  &e_acute        &e_grave     &trans          &trans
            >;
        };
    };
};
